# Enhanced Docker Compose dengan Kafka Bridge & UI
# Tambahkan services berikut ke docker-compose.yml existing

  # Kafka REST Proxy (HTTP Bridge ke Kafka)
  kafka-rest:
    image: confluentinc/cp-kafka-rest:7.5.0
    container_name: kafka-rest
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
    networks:
      - cdc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Manager untuk cluster management
  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kafka-manager
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "9002:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: random-secret-key-123
    networks:
      - cdc-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Connect UI
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    container_name: kafka-connect-ui
    depends_on:
      - kafka-connect
    ports:
      - "8001:8000"
    environment:
      CONNECT_URL: "kafka-connect:8083"
      PROXY: "true"
    networks:
      - cdc-network

# Usage Examples setelah setup:

# 1. View Topics & Messages: http://localhost:9001 (Kafdrop)
# 2. Manage Clusters: http://localhost:9002 (Kafka Manager) 
# 3. Connector Management: http://localhost:8001 (Connect UI)
# 4. HTTP API: http://localhost:8082 (REST Proxy)

# REST API Examples:
# GET Topics: curl http://localhost:8082/topics
# Publish Message: 
# curl -X POST http://localhost:8082/topics/postgres-server.inventory.orders \
#   -H "Content-Type: application/vnd.kafka.json.v2+json" \
#   -d '{"records":[{"value":{"test":"data"}}]}'