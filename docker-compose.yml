services:
  # ClickHouse Server 
  clickhouse:
    image: clickhouse/clickhouse-server:24.3.3.102
    container_name: clickhouse
    environment:
      TZ: Asia/Jakarta
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse-config/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse-config/users.xml:/etc/clickhouse-server/users.d/users.xml
    networks:
      - cdc-network
  # PostgreSQL Database (Source)
  postgres:
    image: quay.io/debezium/example-postgres:2.6
    container_name: postgres-source
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
      TZ: Asia/Jakarta
      PGTZ: Asia/Jakarta
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cdc-network

  # Zookeeper
  zookeeper:
    image: quay.io/debezium/zookeeper:2.6
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - cdc-network

  # Kafka
  kafka:
    image: quay.io/debezium/kafka:2.6
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - cdc-network

  # Kafka Connect with Debezium (FIXED CONFIGURATION)
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # FIXED: Plugin path yang benar untuk dependency discovery
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/usr/share/java/debezium-connector-postgres,/usr/share/java/clickhouse-connector
      # Memory optimization untuk low-memory systems
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
      # Connector configuration optimization
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 1048576
      CONNECT_CONSUMER_MAX_POLL_RECORDS: 500
    volumes:
      # Debezium PostgreSQL connector plugins
      - ./plugins:/usr/share/java/debezium-connector-postgres
      # Additional plugin discovery path for Confluent Hub
      - ./plugins:/usr/share/confluent-hub-components/debezium-postgres
    # Memory limit untuk low-memory systems  
    mem_limit: 1g
    restart: unless-stopped
    networks:
      - cdc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # ClickHouse services dihapus, menggunakan server eksternal: 10.2.238.89:8123

  # Kafdrop (Kafka Web UI)
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms128M -Xmx256M -Xss512K -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - cdc-network

  # Kafka Tools (for testing)
  kafka-tools:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-tools
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c", "sleep infinity"]
    networks:
      - cdc-network

  # =====================================
  # UI MANAGEMENT SERVICES
  # =====================================

  # Kafka REST Proxy (HTTP API to Kafka)
  kafka-rest:
    image: confluentinc/cp-kafka-rest:7.5.0
    container_name: kafka-rest
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
    networks:
      - cdc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Manager (Cluster Management UI)
  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kafka-manager
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "9002:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: random-secret-key-123
    networks:
      - cdc-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Connect UI (Visual Connector Management)
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    container_name: kafka-connect-ui
    depends_on:
      - kafka-connect
    ports:
      - "8001:8000"
    environment:
      CONNECT_URL: "kafka-connect:8083"
      PROXY: "true"
    networks:
      - cdc-network

  # Grafana (Analytics Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-config/datasources:/etc/grafana/provisioning/datasources
      - ./grafana-config/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - cdc-network
    depends_on:
      - clickhouse
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Portainer (Docker Management UI)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - cdc-network
    restart: unless-stopped

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - cdc-network
    restart: unless-stopped

  # Kafka Exporter (Kafka Metrics)
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:9092'
      - '--web.listen-address=:9308'
    depends_on:
      - kafka
    networks:
      - cdc-network
    restart: unless-stopped

  # Postgres Exporter (PostgreSQL Metrics)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres-source:5432/inventory?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - cdc-network
    restart: unless-stopped

  # ClickHouse Exporter (ClickHouse Metrics)
  clickhouse-exporter:
    image: f1yegor/clickhouse-exporter:latest
    container_name: clickhouse-exporter
    ports:
      - "9116:9116"
    command:
      - '-scrape_uri=http://clickhouse:8123/'
    depends_on:
      - clickhouse
    networks:
      - cdc-network
    restart: unless-stopped

  # Prometheus (Metrics Database)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./grafana-config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cdc-network
    restart: unless-stopped


volumes:
  postgres_data:
  clickhouse_data:
  grafana_data:
  portainer_data:
  prometheus_data:

networks:
  cdc-network:
    driver: bridge